import pandas as pd
import numpy as np
import pyodbc
import datetime
#1 : Check "price" column, if value = NULL/not number -> Delete row
test1 = pd.read_csv("car_sample_data1.csv", index_col=0)
test1["Price"].dropna(inplace = True)

test1[pd.to_numeric(test1['Price'], errors='coerce').notnull()]

#2 : Check length "drive-wheels", if >5 -> Delete row
test1[["Drive-wheels"]] = test1[["Drive-wheels"]].apply(pd.to_numeric, errors='coerce')
for x in test1['Drive-wheels'].index:
    if test1.loc[x, 'Drive-wheels'] >5 :
        test1['Drive-wheels'].drop(x, inplace = True)
        
 #3 : Check "Height, Width, Length, Engine-size, Bore, Stroke, Price" datatype, if not interger then -> Delete row       
 test1[["Height", "Width","Length", "Engine-size", "Bore", "Stroke", "Price"]] = test1[["Height", "Width","Length", "Engine-size", "Bore", "Stroke", "Price"]].apply(pd.to_numeric, errors='coerce')

test1[["Height", "Width","Length", "Engine-size", "Bore", "Stroke", "Price", "Wheel-base", "Compression-ratio", "Drive-wheels"]] = test1[["Height", "Width","Length", "Engine-size", "Bore", "Stroke", "Price", "Wheel-base", "Compression-ratio", "Drive-wheels"]].fillna(0).astype(np.int64)
test1[["Height", "Width","Length", "Engine-size", "Bore", "Stroke", "Price", "Wheel-base", "Compression-ratio", "Drive-wheels"]] = test1[["Height", "Width","Length", "Engine-size", "Bore", "Stroke", "Price", "Wheel-base", "Compression-ratio", "Drive-wheels"]].astype(np.int64)

#4: Remove duplicate row
test1.drop_duplicates(inplace = True)

#6: Anonimize "dayUpdate" column to "1" (Ex: 20/11/2021 -> 01/11/2021)
test1['Load-date'] = pd.to_datetime(test1['Load-date'])
test1['Load-date'] = test1['Load-date'].to_numpy().astype('datetime64[M]')

#5 : Rename column "Fuel-type" to "type", "Num-of-cylinders" to "Num_cylinders"
test1.rename (columns={'Fuel-type':'type'}, inplace=True)
test1.rename (columns={'Num-of-cylinders':'Num_cylinders'}, inplace=True)
test1.rename (columns={'Normalized-losses':'Normalized_losses'}, inplace=True)
test1.rename (columns={'Num-of-doors':'Num_of_doors'}, inplace=True)
test1.rename (columns={'Body-style':'Body_style'}, inplace=True)
test1.rename (columns={'Drive-wheels':'Drive_wheels'}, inplace=True)
test1.rename (columns={'Engine-location':'Engine_location'}, inplace=True)
test1.rename (columns={'Wheel-base':'Wheel_base'}, inplace=True)
test1.rename (columns={'Curb-weight':'Curb_weight'}, inplace=True)
test1.rename (columns={'Engine-type':'Engine_type'}, inplace=True)
test1.rename (columns={'Engine-size':'Engine_size'}, inplace=True)
test1.rename (columns={'Fuel-system':'Fuel_system'}, inplace=True)
test1.rename (columns={'Compression-ratio':'Compression_ratio'}, inplace=True)
test1.rename (columns={'peak-rpm':'peak_rpm'}, inplace=True)
test1.rename (columns={'city-mpg':'city_mpg'}, inplace=True)
test1.rename (columns={'highway-mpg':'highway_mpg'}, inplace=True)
test1.rename (columns={'Load-date':'Load_date'}, inplace=True)

test1["Normalized_losses"].replace({"?": "0"}, inplace=True)

# Connect to SQL Server
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=INTERN-PQUOCANH\PHANQUOCANH;'
                      'Database=DTB_TEST1;'
                      'Trusted_Connection=yes;')
cursor = conn.cursor()

# Create Table
cursor.execute
('''
    CREATE TABLE CARtabel_test1_demo2 (
        Symboling int,
        Normalized_losses int,
        Make object,
        Fueltype object,
        Aspiration object,
        Num_of_doors object,
        Body_style object,
        Drive_wheels object,
        Engine_location object,
        Wheel_base float,
        Length float,
        Width float,
        Height float,
        Curb_weight int,
        Engine_type object,
        Num_cylinders object,
        Engine_size float,
        Fuel_system object,
        Bore float,
        Stroke float, 
        Compression_ratio float,
        Horsepower object,
        peak_rpm object,
        city_mpg int,
        highway_mpg int, 
        Price float,
        Load_date object
        )
''')               

# Insert data to database
for row in test1.itertuples():
    cursor.execute('''
    INSERT INTO CARtabel_test1_demo2 (Symboling, Normalized_losses, Make, type, Aspiration, Num_of_doors, Body_style, Drive_wheels, Engine_location, Wheel_base, Length, Width, Height, Curb_weight, Engine_type, Num_cylinders, Engine_size, Fuel_system, Bore,Stroke, Compression_ratio, Horsepower, peak_rpm, city_mpg, highway_mpg, Price,Load_date )
    VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  
                 ''',                 
                row.Symboling,      
                row.Normalized_losses,
                row.Make,
                row.type,
                row.Aspiration,
                row.Num_of_doors,
                row.Body_style,
                row.Drive_wheels,
                row.Engine_location,
                row.Wheel_base,
                row.Length,
                row.Width,
                row.Height,
                row.Curb_weight,
                row.Engine_type,
                row.Num_cylinders,
                row.Engine_size,
                row.Fuel_system,
                row.Bore,
                row.Stroke, 
                row.Compression_ratio,
                row.Horsepower,
                row.peak_rpm,
                row.city_mpg,
                row.highway_mpg, 
                row.Price,
                row.Load_date 
                )
conn.commit()

